{"version":3,"sources":["assets/logo.svg","Components/utils/fetch.js","Components/utils/helpers.js","Components/Header/Header.js","Components/Scroll/Scroll.js","Components/Cards/Cards.js","Components/CardContainer/CardContainer.js","Components/Loading/Loading.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","fetchPeople","fetch","then","response","ok","json","Error","data","fetchSpecies","results","fetchHomeworld","finalResults","map","person","name","homeworld","species","population","replace","cleanedResults","people","result","Object","objectSpread","Promise","all","fetchVehicles","vehicle","model","starship_class","passengers","fetchPlanets","fetchResidentsInPlanets","names","planet","terrain","climate","residents","resident","index","planets","mapPlanets","mapResidents","residentData","residentArray","fetchResidents","Header","value","this","props","retrieveData","_this","react_default","a","createElement","className","type","onClick","handleClick","data-test","Component","Scroll","_ref","releaseDate","title","summary","src","require","alt","id","Cards","peopleCard","key","planetCard","vehicleCard","CardContainer","displayCards","cardsToBeRendered","cards","Components_Cards_Cards","assign","Loading","App","state","cardsToRender","randomMovie","isLoading","toFetch","setState","_this2","randomNum","Math","floor","random","concat","opening_crawl","release_date","fetchMovies","_this$state","Loading_Loading","Components_CardContainer_CardContainer","_this$state2","length","Components_Scroll_Scroll","Components_Header_Header","handleScrollRender","handleCardRender","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d27c70ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37da0be5.svg\";","import {\n  cleanPeopleData,\n  cleanVehiclesData,\n  cleanPlanetsData,\n  cleanRandomMovie\n} from \"./helpers\";\n\nconst fetchMovies = () => {\n  let randomNum = Math.floor(Math.random() * 7) + 1;\n  return fetch(`https://swapi.co/api/films/${randomNum}/`)\n    .then(response => {\n      if (!response.ok) {\n        throw Error(\"Error loading movies\");\n      } else {\n        return response.json();\n      }\n    })\n    .then(result => cleanRandomMovie(result));\n};\n\nconst fetchPeople = () => {\n  const url = \"https://swapi.co/api/people/\";\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw Error(\"Error loading people\");\n      } else {\n        return response.json();\n      }\n    })\n    .then(data => fetchSpecies(data.results))\n    .then(results => fetchHomeworld(results))\n    .then(finalResults => cleanPeopleData(finalResults))\n    .then(cleanedResults => {\n      return cleanedResults;\n    });\n};\n\nconst fetchSpecies = people => {\n  const species = people.map(person => {\n    return fetch(person.species)\n      .then(response => {\n        if (!response.ok) {\n          throw Error(\"Error loading species\");\n        } else {\n          return response.json();\n        }\n      })\n      .then(result => {\n        const newPerson = { ...person, species: result.name };\n        return newPerson;\n      });\n  });\n  return Promise.all(species);\n};\n\nconst fetchHomeworld = people => {\n  const homeworld = people.map(person => {\n    return fetch(person.homeworld)\n      .then(response => response.json())\n      .then(result => {\n        const finishedPerson = {\n          ...person,\n          homeworld: result.name,\n          population: result.population\n        };\n        return finishedPerson;\n      });\n  });\n  return Promise.all(homeworld);\n};\n\nconst fetchVehicles = () => {\n  const url = \"https://swapi.co/api/starships/\";\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw Error(\"Error loading vehicles\");\n      } else {\n        return response.json();\n      }\n    })\n    .then(results => cleanVehiclesData(results.results));\n};\n\nconst fetchPlanets = () => {\n  const url = \"https://swapi.co/api/planets/\";\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw Error(\"Error loading planets\");\n      } else {\n        return response.json();\n      }\n    })\n    .then(results => fetchResidentsInPlanets(results.results))\n    .then(names => cleanPlanetsData(names));\n};\n\nconst fetchResidentsInPlanets = planets => {\n  const mapPlanets = planets.map(planet => {\n    return mapResidents(planet).then(residentData => ({\n      ...planet,\n      residents: residentData\n    }));\n  });\n  return Promise.all(mapPlanets);\n};\n\nconst mapResidents = planet => {\n  const residentArray = planet.residents.map(resident => {\n    return fetchResidents(resident);\n  });\n  return Promise.all(residentArray);\n};\n\nconst fetchResidents = resident => {\n  return fetch(resident).then(response => response.json());\n};\n\nexport { fetchPeople, fetchVehicles, fetchPlanets, fetchSpecies, fetchMovies };\n","const cleanRandomMovie = data => {\n  const movieInfo = {\n    summary: data.opening_crawl,\n    title: data.title,\n    releaseDate: data.release_date\n  };\n  return movieInfo;\n};\n\nconst cleanPeopleData = (data) => {\n  const peopleInfo = data.map(person => {\n    return {\n      name: person.name,\n      homeworld: person.homeworld,\n      species: person.species,\n      population: person.population.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    };\n  });\n  return peopleInfo;\n};\n\nconst cleanVehiclesData = data => {\n  const vehicleInfo = data.map(vehicle => {\n    return {\n      name: vehicle.name,\n      model: vehicle.model,\n      starship_class: vehicle.starship_class,\n      passengers: vehicle.passengers.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    };\n  });\n  return vehicleInfo;\n};\n\nconst cleanPlanetsData = data => {\n  const planetInfo = data.map(planet => {\n    return {\n      name: planet.name,\n      terrain: planet.terrain,\n      climate: planet.climate,\n      population: planet.population.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\n      residents: planet.residents.map((resident, index) => {\n        return (index ? \", \" : \"\") + resident.name;\n      })\n    };\n  });\n  return planetInfo;\n};\n\nexport {\n  cleanRandomMovie,\n  cleanPeopleData,\n  cleanVehiclesData,\n  cleanPlanetsData\n};\n","import React, { Component } from \"react\";\nimport \"./Header.scss\";\nimport { fetchPeople, fetchVehicles, fetchPlanets } from \"../utils/fetch\";\nimport PropTypes from \"prop-types\";\n\nclass Header extends Component {\n  handleClick(value) {\n    if (value === \"people\") {\n      return this.props.retrieveData(fetchPeople);\n    } else if (value === \"planets\") {\n      return this.props.retrieveData(fetchPlanets);\n    } else {\n      return this.props.retrieveData(fetchVehicles);\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"headerContainer\">\n        <div className=\"topNav\" />\n        <hr />\n        <div className=\"buttonContainer\">\n          <input\n            type=\"submit\"\n            className=\"people\"\n            onClick={() => this.handleClick(\"people\")}\n            value=\"PEOPLE\"\n            data-test=\"people-button\"\n          />\n          <input\n            type=\"submit\"\n            className=\"planets\"\n            onClick={() => this.handleClick(\"planets\")}\n            value=\"PLANETS\"\n            data-test=\"planets-button\"\n          />\n          <input\n            type=\"submit\"\n            className=\"vehicles\"\n            onClick={() => this.handleClick(\"vehicles\")}\n            value=\"VEHICLES\"\n            data-test=\"vehicles-button\"\n          />\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  retrieveData: PropTypes.func.isRequired\n};\n","import React from \"react\";\nimport \"./Scroll.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Scroll = ({ releaseDate, title, summary }) => {\n  return (\n    <section className=\"scrollContainer\">\n      <p className=\"openingText\">\n        {\" \"}\n        A long time ago in a galaxy far, far away....\n      </p>\n      <section className=\"logo\">\n        <img src={require(\"../../assets/logo.svg\")} alt=\"Star Wars Logo\" />\n      </section>\n      <div id=\"board\">\n        <div id=\"content\">\n          <p id=\"title\">{releaseDate}</p>\n          <p id=\"subtitle\">{title}</p>\n          <br />\n          <p>{summary}</p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Scroll;\n\nScroll.propTypes = {\n  releaseDate: PropTypes.string,\n  title: PropTypes.string,\n  summary: PropTypes.string\n};\n","import React from \"react\";\nimport \"./Cards.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Cards = ({\n  name,\n  homeworld,\n  species,\n  population,\n  terrain,\n  climate,\n  residents,\n  model,\n  starship_class,\n  passengers\n}) => {\n  const peopleCard = (\n    <article className=\"peopleCard card\" key={name}>\n      <h2>{name}</h2>\n      <h3>\n        Homeworld: <span>{homeworld}</span>{\" \"}\n      </h3>\n      <h3>\n        Species: <span>{species}</span>\n      </h3>\n      <h3>\n        Population: <span>{population}</span>\n      </h3>\n    </article>\n  );\n\n  const planetCard = (\n    <article className=\"planetCard card\" key={name}>\n      <h2>{name}</h2>\n      <h3>\n        Terrain: <span>{terrain}</span>\n      </h3>\n      <h3>\n        Climate: <span>{climate}</span>\n      </h3>\n      <h3>\n        Population: <span>{population}</span>\n      </h3>\n      <h3>\n        Residents: <span>{residents}</span>\n      </h3>\n    </article>\n  );\n\n  const vehicleCard = (\n    <article className=\"vehicleCard card\" key={name}>\n      <h2>{name}</h2>\n      <h3>\n        Model: <span>{model}</span>\n      </h3>\n      <h3>\n        Class: <span>{starship_class}</span>\n      </h3>\n      <h3>\n        Number of passengers: <span>{passengers}</span>\n      </h3>\n    </article>\n  );\n\n  if (homeworld) {\n    return peopleCard;\n  } else if (terrain) {\n    return planetCard;\n  } else {\n    return vehicleCard;\n  }\n};\n\nexport default Cards;\n\nCards.propTypes = {\n  name: PropTypes.string,\n  homeworld: PropTypes.string,\n  species: PropTypes.string,\n  population: PropTypes.string,\n  terrain: PropTypes.string,\n  climate: PropTypes.string,\n  residents: PropTypes.array,\n  model: PropTypes.string,\n  type: PropTypes.string,\n  passengers: PropTypes.string\n};\n","import React from \"react\";\nimport Cards from \"../Cards/Cards\";\nimport \"./CardContainer.scss\";\nimport PropTypes from \"prop-types\";\n\nconst CardContainer = ({ cardsToBeRendered }) => {\n  const displayCards = cardsToBeRendered.map(cards => (\n    <Cards key={cards.name} {...cards} />\n  ));\n\n  \n  return <div className=\"cardContainer\">{displayCards}</div>;\n};\n\nexport default CardContainer;\n\nCardContainer.propTypes = {\n  cardsToBeRendered: PropTypes.array.isRequired\n};\n","import React from \"react\";\nimport \"./Loading.scss\";\n\nexport default function Loading() {\n  return (\n    <section className=\"loading\">\n      <div className=\"lds-dual-ring\" />\n    </section>\n  );\n}\n","import React, { Component } from \"react\";\nimport Header from \"../Header/Header\";\nimport Scroll from \"../Scroll/Scroll\";\nimport CardContainer from \"../CardContainer/CardContainer\";\nimport Loading from \"../Loading/Loading\";\nimport { fetchMovies } from \"../utils/fetch\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = { cardsToRender: [], randomMovie: {}, isLoading: false };\n\n  componentDidMount() {\n    fetchMovies().then(result => this.setState({ randomMovie: { ...result } }));\n  }\n\n  retrieveData = toFetch => {\n    this.setState({ isLoading: true });\n    toFetch().then(response =>\n      this.setState({ cardsToRender: response, isLoading: false })\n    );\n  };\n\n  handleCardRender() {\n    const { cardsToRender, isLoading } = this.state;\n    if (isLoading === true) {\n      return <Loading />;\n    } else {\n      return <CardContainer cardsToBeRendered={cardsToRender} />;\n    }\n  }\n\n  handleScrollRender() {\n    const { randomMovie, cardsToRender, isLoading } = this.state;\n    if (cardsToRender.length === 0 && isLoading === false) {\n      return <Scroll {...randomMovie} />;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header retrieveData={this.retrieveData} />\n        {this.handleScrollRender()}\n        {this.handleCardRender()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}